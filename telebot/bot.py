import asyncio
import logging
import sys
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

BOT_TOKEN = '7729651316:AAGhuO1Pv024FNWhv3fwOX1fnXU4_pn5TS8'
API_URL = "http://127.0.0.1:8000/flats"  

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


class FlatStates(StatesGroup):
    waiting_for_rooms = State()
    waiting_for_region = State()
    waiting_for_region_rooms = State()
    get_flats_by_sqm_price_region = State()

def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä", callback_data="count_flats")
    kb.button(text="üõèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∫—ñ–º–Ω–∞—Ç", callback_data="count_by_rooms")
    kb.button(text="üìç –ö–≤–∞—Ä—Ç–∏—Ä–∏ –∑–∞ —Ä–µ–≥—ñ–æ–Ω–æ–º —ñ –∫—ñ–º–Ω–∞—Ç–∞–º–∏", callback_data="get_flats_by_region_rooms")
    kb.button(text="üí∞ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –∑–∞ –∫—ñ–º–Ω–∞—Ç–∏", callback_data="avg_price_by_rooms")
    kb.button(text="üìè –¶—ñ–Ω–∞ –∑–∞ –º¬≤", callback_data="avg_price_per_sqm")
    kb.button(text="–¢–æ–ø –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ —Ü—ñ–Ω—ñ –∑–∞ –º2 —ñ —Ä–∞–π–æ–Ω—É", callback_data="get_flats_by_sqm_price_region")
    kb.adjust(2)
    return kb.as_markup()

@dp.message(CommandStart())
async def start_message(message: Message):
    await message.answer(f'–ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}! –û–±–µ—Ä–∏ –¥—ñ—é:', reply_markup=main_menu())


@dp.callback_query()
async def process_callback(call: CallbackQuery, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        if call.data == "count_flats":
            async with session.get(f"{API_URL}/count") as response:
                data = await response.json()
                await call.message.answer(f"üî¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä: {data}")

        elif call.data == "count_by_rooms":
            await call.message.answer("üî¢ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç:")
            await state.set_state(FlatStates.waiting_for_rooms)

        elif call.data == "get_flats_by_region_rooms":
            await call.message.answer("üìç –í–≤–µ–¥—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω:")
            await state.set_state(FlatStates.waiting_for_region_rooms)

        elif call.data == "avg_price_by_rooms":
            await call.message.answer("üí∞ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ü—ñ–Ω–∏:")
            await state.set_state(FlatStates.waiting_for_rooms)

        elif call.data == "avg_price_per_sqm":
            async with session.post(f"{API_URL}/avg_price_per_sqm") as response:
                data = await response.json()
                await call.message.answer(f"üìè –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –∑–∞ –º¬≤: {data}")
                
        elif call.data == "get_flats_by_sqm_price_region":
            await call.message.answer("üìç –í–≤–µ–¥—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω:")
            await state.set_state(FlatStates.get_flats_by_sqm_price_region)

@dp.message(FlatStates.waiting_for_rooms)
async def get_count_by_rooms(message: Message, state: FSMContext):
    try:
        rooms = int(message.text)
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/count_by_rooms?rooms={rooms}") as response:
                data = await response.json()
                await message.answer(f"üõèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä –∑ {rooms} –∫—ñ–º–Ω–∞—Ç–∞–º–∏: {data}")
        await state.clear() 
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.")

@dp.message(FlatStates.get_flats_by_sqm_price_region)
async def get_flats_by_sqm_price_region(message: Message, state: FSMContext):
    try:
        region = str(message.text)
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    f"{API_URL}/get_flats_by_sqm_price_region",
                    json={"region": region}
                ) as response:
                    data = await response.json()
                    for flat in data: 
                        short_description = (flat['description'][:200] + '...') if len(flat['description']) > 200 else flat['description']
                        response_text = (
                            f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞ —É —Ä–∞–π–æ–Ω—ñ {flat['region']}\n"
                            f"üî¢ –ö—ñ–º–Ω–∞—Ç: {flat['rooms']}\n"
                            f"üìè –ü–ª–æ—â–∞: {flat['total_size']} –º¬≤\n"
                            f"üí∞ –¶—ñ–Ω–∞: {flat['price']} ({flat['price_per_m2']} –∑–∞ –º¬≤)\n"
                            f"üìù –û–ø–∏—Å: {short_description}\n"
                            f"üìç –ê–¥—Ä–µ—Å–∞: {flat['adress']}\n"
                            f"üîó –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: {flat['link']}"
                        )
                        await message.answer(response_text)
                        if flat['photos']:
                            await message.answer_photo(flat['photos'][0])
                    else:
                        await message.answer(f"üîç –ö–≤–∞—Ä—Ç–∏—Ä —É —Ä–∞–π–æ–Ω—ñ {region} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                await state.clear()
            except Exception as e:
                await message.answer(f'Error: {e}')
    except ValueError:
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–∞–π–æ–Ω')

@dp.message(FlatStates.waiting_for_region_rooms)
async def get_region_for_flats(message: Message, state: FSMContext):
    await state.update_data(region=message.text)
    await message.answer("üõèÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç:")
    await state.set_state(FlatStates.waiting_for_rooms)

@dp.message(FlatStates.waiting_for_rooms)
async def get_flats_by_region_rooms(message: Message, state: FSMContext):
    try:
        rooms = int(message.text)
        user_data = await state.get_data()
        region = user_data.get("region")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_URL}/get_flats_by_region_rooms", json={"region": region, "rooms": rooms}) as response:
                data = await response.json()
                await message.answer(f"üè° –ö–≤–∞—Ä—Ç–∏—Ä–∏ –≤ {region} –∑ {rooms} –∫—ñ–º–Ω–∞—Ç–∞–º–∏:\n{data}")
        
        await state.clear()  
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.")

@dp.message(FlatStates.waiting_for_rooms)
async def get_avg_price_by_rooms(message: Message, state: FSMContext):
    try:
        rooms = int(message.text)
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_URL}/avg_price_by_rooms", json={"rooms": rooms}) as response:
                data = await response.json()
                await message.answer(f"üí∞ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä –∑ {rooms} –∫—ñ–º–Ω–∞—Ç–∞–º–∏: {data}")
        await state.clear() 
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.")

async def main():
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
