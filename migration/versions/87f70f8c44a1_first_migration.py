"""First migration

Revision ID: 87f70f8c44a1
Revises: 
Create Date: 2025-03-16 20:45:38.586916

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '87f70f8c44a1'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Flats',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('price', sa.Integer(), nullable=False),
    sa.Column('price_per_sqm', sa.Integer(), nullable=False),
    sa.Column('district', sa.String(), nullable=False),
    sa.Column('rooms', sa.String(), nullable=False),
    sa.Column('floor', sa.String(), nullable=False),
    sa.Column('square', sa.Integer(), nullable=False),
    sa.Column('room_squares', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.drop_table('users')
    op.drop_table('user_progression')
    op.drop_table('answers_questions')
    op.drop_table('answers')
    op.drop_table('questions')
    op.drop_table('sessions')
    op.drop_table('categories')
    op.drop_table('expired_tokens')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('expired_tokens',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('expired_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='expired_tokens_pkey')
    )
    op.create_table('categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='sessions_category_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='sessions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sessions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('questions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('questions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('question', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('difficulty', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='questions_category_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='questions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('answers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('answer_text', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('correctness', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name='answers_question_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='answers_pkey')
    )
    op.create_table('answers_questions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sesion_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('answer', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_answered_correct', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name='answers_questions_question_id_fkey'),
    sa.ForeignKeyConstraint(['sesion_id'], ['sessions.id'], name='answers_questions_sesion_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='answers_questions_pkey')
    )
    op.create_table('user_progression',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('questions_quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('interview_counted', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('answers_rate', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_progression_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_progression_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey')
    )
    op.drop_table('Flats')
    # ### end Alembic commands ###
